* Arrays estáticos y dinámicos

** Discución y ejemplos sobre Arrays
*** ¿Qué es un array estatico?
Un array estatico es un contenedor de tamaño fijo que contiene $`n`$
elementos que son indexables en el rango de $`[0, n-1]`$.

#+begin_quote
  Con indexamples nos referimos a que a cada indice/casilla del array se
  le puede asignar un número.
#+end_quote

Cada array estatico es asignado a memoria como una porción contigua de
direcciónes de memoria. ### ¿Cuándo y donde son usados los arrays? 1.
Cuando necesitas guardar y accesar a datos secuenciales. 2. Para guardar
temporalmente objetos. 3. Usados por rutinas de IO como buffers. 4. En
tablas de consulta (/lookup tables/) y tablas de consulta inversas. 5.
Pueden ser usadas para retornar múltiples valores de una función. 6.
Usados en programación dínamica como cache de respuestas a subproblemas.

*** Complejidad
    :PROPERTIES:
    :CUSTOM_ID: complejidad
    :END:
|           | Array estático | Array dinámico |
|-----------+----------------+----------------|
| Acceso    | $`O(1)`$       | $`O(1)`$       |
| Inserción | $`N/A`$        | $`O(n)`$       |
| Anexar    | $`N/A`$        | $`O(1)`$       |
| Borrar    | $`N/A`$        | $`O(n)`$       |

#+begin_quote
siendo $`n`$ el tamaño del array.
#+end_quote

*** Ejemplo de array estáticos
Siendo un array $`A`$.

| Valor  |    44 |    12 |    -5 |    17 |     6 |     0 |     3 |     9 |   100 |
| :---:  | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
| Índice |     0 |     1 |     2 |     3 |     4 |     5 |     6 |     7 |     8 |

Los elementos en A están referenciados por su índice. No hay otra manera
de acceder a estos elementos en el array. La anexación en un array esta
basada en O, lo cual significa el el primer elemento esta en el indice
0.

#+begin_src java
A[0] = 44
A[1] = 12
A[4] = 6
A[7] = 9
A[9] => index out of bounds!
#+end_src

** Operación de array dinámicos
Los array dinámicos pueden crecer y decrecer en su tamaño

#+begin_src java
A = [34,4]
A.add(-1)   A = [34,4,-7]
A.add(34)   A = [34,4,-7,34]
A.remove(4) A = [34,-7,34]
#+end_src

**** ¿Como implementar un Array dinámico?
Una manera de hacerlo es usando un array estático.
1. Creamos un array estático con una capacidad inicial.
2. Añadimos elementos al array llevando una cuenta de cuantos elementos hay siempre y cuando no
   sobrepasen la cantidad de casillas en el array.
3. Si al añadir elementos al array sobrepasamos su capacidad, creamos un nuevo array
   estático con el doble de capacidad y copiamos los elementos del array
original al nuevo.

** Inplementación de código
#+begin_src java
/**
,* A generic dynamic array implementation
,*
,* @author William Fiset, william.alexandre.fiset@gmail.com
,*/
package com.williamfiset.algorithms.datastructures.dynamicarray;

    @SuppressWarnings("unchecked")
    public class DynamicArray<T> implements Iterable<T> {

    private T[] arr;
    private int len = 0; // length user thinks array is
    private int capacity = 0; // Actual array size

    public DynamicArray() {
      this(16);
    }

    public DynamicArray(int capacity) {
      if (capacity < 0) throw new IllegalArgumentException("Illegal Capacity: " + capacity);
      this.capacity = capacity;
      arr = (T[]) new Object[capacity];
    }

    public int size() {
      return len;
    }

    public boolean isEmpty() {
      return size() == 0;
    }

    public T get(int index) {
      if (index >= len || index < 0) throw new IndexOutOfBoundsException();
      return arr[index];
    }

    public void set(int index, T elem) {
      if (index >= len || index < 0) throw new IndexOutOfBoundsException();
      arr[index] = elem;
    }

    public void clear() {
      for (int i = 0; i < len; i++) arr[i] = null;
      len = 0;
    }

    public void add(T elem) {

      // Time to resize!
      if (len + 1 >= capacity) {
        if (capacity == 0) capacity = 1;
        else capacity *= 2; // double the size
        T[] new_arr = (T[]) new Object[capacity];
        for (int i = 0; i < len; i++) new_arr[i] = arr[i];
        arr = new_arr; // arr has extra nulls padded
      }

      arr[len++] = elem;
    }

    // Removes an element at the specified index in this array.
    public T removeAt(int rm_index) {
      if (rm_index >= len || rm_index < 0) throw new IndexOutOfBoundsException();
      T data = arr[rm_index];
      T[] new_arr = (T[]) new Object[len - 1];
      for (int i = 0, j = 0; i < len; i++, j++)
        if (i == rm_index) j--; // Skip over rm_index by fixing j temporarily
        else new_arr[j] = arr[i];
      arr = new_arr;
      capacity = --len;
      return data;
    }

    public boolean remove(Object obj) {
      int index = indexOf(obj);
      if (index == -1) return false;
      removeAt(index);
      return true;
    }

    public int indexOf(Object obj) {
      for (int i = 0; i < len; i++) {
        if (obj == null) {
          if (arr[i] == null) return i;
        } else {
          if (obj.equals(arr[i])) return i;
        }
      }
      return -1;
    }

    public boolean contains(Object obj) {
      return indexOf(obj) != -1;
    }

    // Iterator is still fast but not as fast as iterative for loop
    @Override
    public java.util.Iterator<T> iterator() {
      return new java.util.Iterator<T>() {
        int index = 0;

        @Override
        public boolean hasNext() {
          return index < len;
        }

        @Override
        public T next() {
          return arr[index++];
        }

        @Override
        public void remove() {
          throw new UnsupportedOperationException();
        }
      };
    }

    @Override
    public String toString() {
      if (len == 0) return "[]";
      else {
        StringBuilder sb = new StringBuilder(len).append("[");
        for (int i = 0; i < len - 1; i++) sb.append(arr[i] + ", ");
        return sb.append(arr[len - 1] + "]").toString();
      }
    }
}
#+end_src
