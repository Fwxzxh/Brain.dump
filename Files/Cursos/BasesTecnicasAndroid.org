#+TITLE: Curso de Bases Técnicas de Android

* Android
** Introducción a android
- Sistema operativo basado en el kernel de Linux
- Creado por google.
- Código abierto.

** Retos de desarrollo en android
- Disponibilidad.
  - Las plataformas a las cuales queremos llegar.
  - Fragmentación de dispositivos.
  - Versonamiento de sistemas operativos.
  - DPIs de las pantallas.
- Rendimiento.
  - Consumo del CPU y uso de memoria.
- Calidad.
  - La aplicación haga lo que dice que hace.
  - Debemos de conocer bien el sistema operativo para evitar sorpresas.
  - Métricas de diseño.
  - Workflow.
  - Testing.

** Tipos de dispositivos Android y soporte
- Compatibilidad
  - Compatibilidad con el dispositivo.
    - Hay mucha variedad de hardware.
    - Características de hardware.
    - Versión de android.
    - Configuración de pantalla.
  - Compatibilidad con la aplicación.
  - Debemos especificar dos versiones de API con la aplicación.
    - =minSdkVersion=
      - La versión mínima de android que soportaremos.
    - =targetSdKVersion=
      - La versión objetivo de android que queremos soportar.

* Componentes de una aplicación
** =Activity=
- Es una pantalla de una aplicación.
- Se compone de:
  - Es una clase de java que herede de la clase =activity=.
  - El =layout= (La Interfaz gráfica).
- Ciclo de vida de una actividad.
  1. La actividad es creada con el método =onCreate()=.
     - Recibe el estado de la actividad anterior como estado.
       - De tipo =Bundle=.
  2. Pasamos al estado =Started= con el método =onStart()=.
     - Esto es cuando la actividad está por ser mostrada.
  3. Llegamos al estado =Resumed= con el método =onResume()=.
     - Esto es cuando la actividad ya es visible.
  4. Podemos llegar a un estado =Paused= con el método =onPause()=.
     - En este estado otra actividad tiene el focus de la aplicación.
  5. Podemos llegar al estado =Stopped= con el método =onStop()=.
     - La actividad ya no es visible.
     - Esto pasa cuando por ejemplo presionamos el botón de home.
     - Podemos regresar de este estado a =Started= con el método =onRestart()=
  6. Al final llegamos a el estado =Destroyed= con el método =onDestroy()=
     - Esto pasa cuando por ejemplo presionamos el botón de back en el dispositivo.

** =Fragments=
- Todas las aplicaciones tiene una barra inferior o una barra superior.
  - Funcionan a partir de un concepto llamado =fragments=.
    - Son un tipo de contenedor que tienen una parte de la FUI.
  - Usamos ciertas clases para manejarlos.
    - =FragmentManager=
      - Manejar los =fragments=
      - Junto con nuestra librería de soporte.
    - =Transacciones=
      - Todas las acciones que podemos realizar con los =fragments=
    - =Commits=
      - Cada que se hace una transacción, se hace un =commit=

** =Intent=
- Es muy común tener un flujo de navegación o de ventanas en una aplicación.
  - Es decir, más de una =activity= conectadas entre si.
- los =Intent= nos ayudan a unir los componentes de una aplicación.
- Podemos tener dos casos:
  - Unir varios =activity=.
    - Estos son =intent= explícitos.
  - Unir =activitys= que viven en diferentes aplicaciones.
    - =intent= implícitos.
- Todos los componentes de android están aislados.
  - Con los =intent= permitimos la comunicación entre diferentes partes de una apeo.

** =Services=
- Los servicios nos permiten hacer cosas cuando la aplicación no esta corriendo.
  - O para ejecutar tareas en segundo plano.
- Se arrancan a partir de las =activity=.
- Se crean con el método =onStartCommand()=.
- Tipos de servicios:
  - En primer plano:
    - Es un servicio que realiza una tarea que el usuario puede notar.
    - Estos continúan ejecutándose incluso si el usuario deja de interactuar con la aplicación.
  - En segundo plano:
    - Este realiza una tarea que el usuario no nota directamente.
    - Son servicios en segundo plano.
  - Enlace (=Bind=)
    - Podemos enlazar un servicio con =onBind()= y des enlazarlo con =onUnbind()=.
    - Un servicio es de enlace cuando un componente de la app se vincula a el con el método =bindService()=
    - Este ofrece una interfaz cliente-servidor que permite que los componentes interactúen con el
      servicio.
      - Permitiendo comunicación con distintos procesos (IPC).
    - Este solo se ejecuta mientras otro componente de la app este enlazado a el.

** =Broadcast=
