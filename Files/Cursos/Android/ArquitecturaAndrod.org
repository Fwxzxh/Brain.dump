#+TITLE: Curso de arquitectura en Android

* Arquitectura de Software
** Arquitectura en Android
- Deuda técnica
  - Esfuerzo adicional causado por la elección de un desarrollo sencillo.
- Las aplicaciones deben ser:
  - Rápidas.
  - Fluidas.
  - Seguras.
  - Mantenibles.
- Necesitamos una buena arquitectura para cumplir los puntos anteriores.

** Patrón de diseño VAS Arquitectura de diseño
- Patrón de diseño.
  - Solución a un problema común de código.
  - Solo se refiere a un componente o elemento de la aplicación.
  - Ejemplos:
    - =Singleton=.
    - =Adapter=.
    - =Builder=.
    - =Factory=.
- Arquitectura de diseño.
  - Proporciona la estructura, funcionamiento e interacción entre las partes del software.
  - La organización y estructura de la aplicación.
  - Ejemplos:
    - =MVC: Model-View-Controler=.
    - =MVP: Model-View-Presenter=.
    - =MVVM: Model-View-ViewModel=.

** Qué es la Arquitectura de diseño
- Se encarga de la Estructura, funcionamiento e Interacción de las partes del software.
- El modelo de capas:
  - =UI=
    - La presentación.
    - =FrontEnd=.
  - =Business Logic=
    - Las reglas de negocio.
    - Casos de uso de la aplicación.
    - Qué, como y cuando de la aplicación.
  - =Data=
    - Persistencia y/o procesamiento de la información.
- Arquitecto de software:
  - Analiza
  - Planea con anticipación.
  - Toma decisiones para evitar riesgos.
  - Tiene una amplia experiencia resolviendo problemas.
- Organiza mejor el código para trabajar en equipo.
- Hace el código más intuitivo de leer y de escribir.
- Hace más fácil testear e integrar nueva funcionalidad.

** Principios =SOLID=
- =S=: =Single Responsability=.
  - Cada clase debe de tener una sola responsabilidad.
  - Esto nos ayuda a modularizar el código.
  - Facilita cambiar funcionalidades.
- =O=: =Open/Closed Principle=
  - Organizar el código modularmente.
  - Las clases, módulos, interfaces deben de estar abiertas para la extensión pero no para la modificación.
  - Nos permite componer las clases.
  - Composición > Herencia.
- =L=: =Liskov substitution=
  - Deberíamos de poder usar una clase hija para sustituir una clase padre sin errores.
- =I=: =Interface Segregation=
  - Si una interfaz crece demasiado viola el primer principio.
  - Usar Clases abstractas e interfaces para que cada interfaz cumpla el primer principio.
- =D=: =Dependency Inversion=
  - Inversión de dependencias.
  - Un elemento debe de depender de una abstracción y no de algo concreto.
  - Un módulos de alto nivel no debe depender de los de bajo nivel. ambos deben de depender de abstracciones.
    - P. Ej: interfaces.
  - Las abstracciones no deberían depender de los detalles.
    - Son los detalles los que deberían depender de abstracciones.
  - Los módulos no deben de depender unos de otros, si no de abstracciones.

** Evolución de arquitectura en Android
- MVC
- MVP
- MVVM
- Android Jetpack: arquitectura por componentes

*  Arquitectura MVC

** Qué es la arquitectura Model-View-Controler
- =View=
  - La UI.
- =Controler=
  - Lógica de negocio.
  - Casos de uso.
- Ambos el =View= y el =Controler= están en la misma clase
- =Model=
  - Contenido en una clase aparte.
  - Conexión a almacenamiento.

* Arquitectura MVP
** Qué es la arquitectura Model-View-Presenter (MVP)
- Ayuda a no recargar de código la =MainActivity= y las clases de las =activity=.
- =View=
  - Activity
  - Fragment
  - UI en general
- =Presenter=
  - Orquesta lo que la vista pide.
  - Es un intermediario entre el =model= y el =view=.
  - Cada activity tiene su propio presenter.
- =Model=
  - =Interactor=
    - Decide de donde sacar los datos.

** Qué es clean architecture
- Hacen referencia a buenas prácticas de diseño y arquitectura que se aplican a ciertos elementos.
- Tiene como objetivo separar el código en sus diferentes responsabilidades.
  - =Presentation layer=
  - =Business logic layer=
  - =Data layer=
- Tiene 5 principios:
  - Independiente de cualquier Framework.
  - Testeadle.
  - Independiente de la UI.
  - Independiente de la base de datos.
  - Independiente de cualquier elemento externo.
- Sus elementos son:
  - =Entities=
    - Modelos definidos que interactúan en el sistema.
    - Deben ser lo suficientemente abstractas para ser usadas por múltiples aplicaciones.
  - =Use cases=
    - Contienen reglas que le dan sentido a la aplicación.
    - Dirijan el flujo a las entidades y las orquestan para cumplir con el negocio.
  - =Repositiories y Presenters=. =Interface adapters=
    - Esta es la capa interceptora que convierte los datos extraidos por la UI a un formato más conveniente para los casos de uso.
  - =UI=, =Data source=, =Frameworks= y =Drivers=
    - En esta capa van todos los detalles, tanto para mostrar datos en la UI como para obtener los datos requeridos.

** Composición de clases
- Composición > Herencia.
- Componemos los comportamientos en interfaces y se los vamos dando a las clases que deseamos.
- Abstraemos funcionalidades mediante una interfaz.
  - con esto podemos reutilizar el comportamiento de una interfaz.
