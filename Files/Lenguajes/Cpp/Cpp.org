#+TITLE: C++

* Conceptos Básicos
** C++
- Es un popular lenguaje multiplataforma de uso general.
- Puede ser usado para hacer aplicaciones de alto rendimiento.
- C++ esta derivado de C.

-----

Un programa de C++ es una colección de comandos

#+begin_src cpp
#include <iostream>

int main() {
    return 0;
}
#+end_src

El punto de entrada para cualquier programa de C++ es la función =main=.

*** Hola mundo

#+begin_src cpp
#include <iostream>

int main()
{
    cout << "Hello world!";
    cout << " This " << "is " << "awesome";
    return 0;
}
#+end_src

- =cout= es usado para imprimir en la salida estándar (consola).
- Es usado en conjunto con el operador de inserción =<<=.

** =Headers= y =namespaces=
- C++ ofrece diversos =headers= cada uno conteniendo información para que los programas se ejecuten de manera correcta.
- El =header= =iostream= define los objetos estándar para la entrada y salida de datos

#+begin_src cpp
#include <iostream>
using namespace std; // <- Namespace

int main()
{
    cout << "Hello world!";
    return 0;
}
#+end_src

- Un =namespace= es un espacio de nombres, provee un alcance a los identificadores que se encuentran dentro del =namespace=.
- En nuestro código, =using namespace std= dice que vamos a usar el espacio de nombres =std=, en nuestro archivo.
  - =std= incluye funcionalidades de la biblioteca estándar de c++.

** Salto de linea
Para meter saltos de línea a nuestro mensaje en consola utilizamos =endl=.

#+begin_src cpp
#include <iostream>
using namespace std;

int main()
{
    cout << "Hello world!" << endl;
    cout << "I love programing";
    return 0;
}
#+end_src

También podemos hacer uso del carácter de salto de linea en lugar de =endl=

#+begin_src cpp
#include <iostream>
using namespace std;

int main()
{
    cout << "Hello world! \n";
    cout << "I love programing";
    return 0;
}
#+end_src

El =\= indica que es un carácter especial.

** Comentarios
Los comentarios son lineas que el compilador ignora y son usadas para documentar el código.

#+begin_src cpp

#include <iostream>
using namespace std;

int main()
{
    // <- Esto es un comentario
    cout << "Hello world! \n";
    cout << "I love programing";
    /*
      comentari multilinea
     */
    return 0;
}
#+end_src

- Los comentarios que empiezan con =/*= y terminan con =*/= son comentarios multilinea.
- Los comentarios que empiezan con dos diagonales son comentarios de una sola línea.


** Variables
- Crear una variable reserva un espacio en la memoria para guardar esta variable.
  - Para esto el compilador necesita el tipo de esta variable, para guardar la cantidad exacta de espacio.
- C++ tiene tipos por defecto además de que podemos definir los nuestros.
- Diferentes sistemas operativos y arquitecturas pueden reservar diferentes tamaños de memoria para cada tipo.

#+begin_src cpp
#include <iostream>
using namespace std;

int main()
{
    int myVariable = 10;
    cout << myVariable;
    return 0;
}
#+end_src

C++ es sensible a las mayúsculas con las variables.

-----

Podemos definir varias variables en una sola linea si son del mismo tipo.

#+begin_src cpp
int a, b, c;
int sum = a + b + c;
#+end_src

Todas las variables deben de ser definidas con un nombre y un tipo antes de ser utilizadas.

** Trabajando con variables
Podemos decidir si asignar un valor a una variable o hacerlo despues.

#+begin_src cpp
int a;
int b;

a = 10;
b = 20;
#+end_src

Para leer la entrada de un valor en la consola ocupamos =cin=.

#+begin_src cpp
int num;
cin >> num;
#+end_src

El siguiente ejemplo le pide al usuario un valor y lo guarda en la variable =a=.

#+begin_src cpp
#include <iostream>
using namespace std;

int main()
{
    int a;
    cout << "Please enter a number" << endl;
    cin >> a;
    return 0;
}
#+end_src

También podemos tener un ejemplo más complejo:

#+begin_src cpp
#include <iostream>
using namespace std;

int main()
{
    int a, b;
    cout << "Please enter a number" << endl;
    cin >> a;
    cout << "Enter another number \n";
    cin >> b;
    cout << "Sum is: " << sum << endl;
    return 0;
}
#+end_src

** Más sobre variables
- Especificar el tipo de dato es requerido solo una vez, cuando esta es declarada,
  después podemos usarla sin declarar su tipo.
- Una variable puede ser cambiada cada que sea necesario.
- Podemos usar la palabra =auto= para inferir el tipo automáticamente.
  - Las variables declaradas con =auto= deben ser inicializadas con un valor siempre.

#+begin_src cpp
auto x = 4; // integer
auto y = 3.37; // float
auto z = "hello"; // string
#+end_src

** Operador de asignación e incremento
- Todos los operadores aritméticos son los mismos: =+-*/%=
- También podemos hacer una asignación y operación aritmética en una sola linea.

#+begin_src cpp
int x = 20;
x += 4; // equivalente a x = x + 4
x -= 5; // equivalente a x = x - 4
#+end_src

También están los operadores de incremento y decremento

#+begin_src cpp
int x = 20;
x++; // equivalente a x = x + 1
x--; // equivalente a x = x - 1
#+end_src

Hay dos formas de este operador, prefix y posfix
