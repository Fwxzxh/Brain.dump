#+TITLE: Head First C

* Getting started with C
** but what does a complete C program look like?
- Para crear un programa necesitas escribir tu código en un archivo
  - Normalmente terminan con la extensión =.c=.
- Normalmente empiezan con un comentario.
  - Este describe el propósito del código o programa
- Luego viene la sección de =imports=
  - C es un lenguaje muy pequeño y casi no puede hacer nada sin el uso de librerías externas
  - Necesitas decirle al compilador que código externo usar con el uso de =header files=
  - Un header común es =stdio.h= este contiene código que permite leer y escribir datos de
    la terminal
- Lo ultimo que verás en un archivo de c serán las funciones
  - Todo el código en C corre dentro de funciones.
  - La función más importante es llamada =main()=.
    - Esta es el punto de inicio de todo el código en tu programa

#+begin_src c
/*
 ,* Program to calculate the number of cards in the shoe.
 ,* This code is released under the Vegas Public License.
 ,* (c)2014, The College Blackjack Team.
 ,*/

#include <stdio.h>

int main () {
    int decks;
    puts("Enter a number of decks");
    scanf("%i", &decks);
    if (decks < 1) {
        puts("That is not a valid number of decks");
        return 1
    }
    printf("There are %i cards\n", (decks * 52));
    return 0
}
#+end_src

*** La función =main=
- La computadora empezará a correr el programa desde la función main
  - El nombre es importante, debe de llamarse =main()=.
- Esta tiene un tipo de retorno =return type= de entero (=int=).
  - Esto es porque la computadora necesita tener un método de saber si tu programa ejecuto sin errores.
    - La computadora sabe esto verificando el valor de retorno de la función =main=.
  - Si el programa retorna 0, significa que el programa se ejecuto sin errores.
  - Si le dices que retorne algún otro número, significa que hubo un problema.
- El nombre de la función se escribe después del tipo de retorno.
  - Si la función =main= necesitará algún parametro estos irían entre los parentesis =()=.
  - Después viene el cuerpo de la función, el cual debe estar entre llaves ={}=.

*** La función =printf=
- Es usada para mostrar texto formateado en la terminal.
- Reemplaza caracteres de formato con los valores de las variables.


#+begin_src c
printf("%s says the count is %s", "ben", 21);
#+end_src

- =%s= será insertado como un =string=.
- =%i= será insertado como un =int=.
- Y estos van en orden junto con los otros parametros
  - ="ben"= siendo un =string=.
  - =21= siendo un =int=.

*** Ejemplo
#+begin_src c
// Program to evaluate face values.

#include <stdio.h>
#include <stdlib.h>

int main() {
    char card_name[3];
    puts("Enter the card_name: ");
    scanf("%2s", card_name); // leemos 2 caracteres
    int val = 0;
    if (card_name[0] == 'K') { // Obtenemos el primer caracter de card_name
        val = 10;
    } else if (card_name[0] == 'Q') {
        val = 10;
    } else if (card_name[0] == 'J') {
        val = 10;
    } else if (card_name[0] == 'A') {
        val = 11;
    } else {
        val = atoi(card_name);
    }


    printf("The card value is: %i\n" val);
    return 0;
}
#+end_src

** But How do you run the program?
- C es un lenguaje compilado
  - Esto significa que necesitas convertir (compilar) el código a código maquina.
  - Para hacer esto necesitas un programa llamado compilador.
  - Uno de los más populares es gcc.


Suponiendo que se guardo el programa anterior con el nombre =cards.c=:
- Necesitamos escribir:
  - =gcc cards.c -o cards=
    - Esto dice: compila el archivo =cards.c= en un ejecutable llamado =cards=.
  - ahora podemos correr el programa escribiendo =./cards=.
- Podemos compilar y correr nuestro código en un solo comando haciendo:
  - =gcc cards.c -o cards && ./cards=
    - el =&&= básicamente dice "si se completa con éxito, haz esto otro".
    - En un sistema windows podrías necesitar escribir =cards= solamente en lugar de =./cards=.

*** Teoría de =Strings=
C no tiene soporte para =strings= por defecto (esto porque es de más bajo nivel que otros lenguajes),
así que tenemos que usar un arreglo de caracteres para simular un =string=.

- Los =strings= son en esencia un arreglo de caracteres individuales.
- De esta manera podemos referirnos a los caracteres de un =string= con su índice.

C al ser de más bajo nivel que otros lenguajes no siempre puede saber el que tan largo un arreglo es.

Si C va a escribir algo en la pantalla, necesita saber en donde termina este =string=, y lo hace usando
un *carácter centinela*.

Este carácter es un carácter al final del =string= que tiene el valor =\0=.
Entonces cuando escribe carácter por carácter se va a detener cuando encuentre este centinela.

#+begin_quote
Se suele referir a este como  el caracter =null=.
#+end_quote

Si tenemos =s = "shatner"= C lo guarda en la memoria como =shatner\0=

Esta es la razón por la que en nuestro código usamos =char card_name[3];=.
Vamos a leer 2 caracteres, pero ponemos que nuestro arreglo es de 3 porque hacemos espacio para el centinela.

**** =string literals= y arreglos

- Los arreglos son numerados desde el 0 y no desde el 1 porque:
  - El índice en C es un =offset= una compensación.
    - La computadora va a guardar caracteres en bytes consecutivos de memoria.
    - La computadora puede usar este índice para calcular la posición de un carácter en la memoria.
      - Si =c[0]= esta en la posición de memoria =1000000=, C puede calcular que =c[96]= esta en =1000000 + 96=.
- Debemos usar comillas simples =''= para los caracteres individuales y las comillas dobles =""= para los =strings literals=.
  - Podemos usar estos como =strings= normales, pero estos son inmutables.
    - Entonces no podemos cambiar el contenido de estos una vez son creados.
      - Si lo hacemos obtendremos un error al compilar.

*** Painless Operations
En C, el símbolo de igual (=) es usado para asignaciones. pero un doble igual es usado para verificar igualdad.
Pero tambien lo podemos usar para hacer operaciones

#+begin_src c
teeth = 4; // asignación
teeth == 4; // igualdad
teeth += 2; // Sumar dos a teeth
teeth -+ 2; // Sestar dos a teeth
theeth ++; // Incrementar teeth 1
theeth --; // Decrementar teeth 1
#+end_src

** Dos tipos de comandos
Hasta ahora cada comando que se ha visto cae en una de dos categorías:

*** Haz algo
La mayoría de los comandos en C son expresiones. Estos *hacen* cosas y nos *dicen* cosas.

#+begin_src c
split_hand(); // <- expresión simple
#+end_src

A veces agrupamos expresiones juntas para crear un *bloque* y estos están entre llaves.

#+begin_src c
{
    deal_first_card();
    deal_second_card();
    cards_in_hand = 2;
}
#+end_src

*** Haz algo *solo si* algo más es verdadero
Expresiones de control como el =if= verifican una condición antes de correr el código.

#+begin_src c
if (value_of_hand <= 16) // Condición
    hit(); // Esta expresión correrá si la condición es verdadera.
else
    stand(); // Corre esta expresión si la condición es falsa.
#+end_src

Si una expresión =if= necesita hacer más de una cosa, podemos agregar las llaves para hacer un bloque

#+begin_src c
if (dealer_card == 5) {
    double_down();
    hit();
}
#+end_src

** There's more to booleans than equals
Hay ocasiones en las cuales queremos ver si varios elementos son verdaderos

*** =&&= verifica si dos condiciones son verdaderas
El operador =&&= retorna verdadero, solo si *ambas* condiciones dadas son verdaderas.

#+begin_src c
if ((dealer_up_card == 6) && (hand == 11))
    double_down();
#+end_src

Si la primera condición es verdadera, entonces se evalúa la segunda. Si este no fuera el caso,
la computadora no evalúa la segunda.

*** =||= Evalúa si una de las condiciones es verdadera
El operador =or= (=||=) retorna verdadero si *cualquiera* de las condiciones dadas es verdadera.

#+begin_src c
if (cupcakes_in_fridge || chips_on_table)
    eat_food();
#+end_src

*** =!=  Invierte el resultado de la condición
=!=  es el operador =not=, este invierte el resultado de una condición.

#+begin_src c
if (!brad_on_phone)
    answer_phone();
#+end_src

*** booleanos
En C los valores booleanos son representados con números, Para C el número 0 es falso y cualquier
número que no sea 0 es tratado como verdadero.

Así que código como el siguiente funciona.

#+begin_src c
int people_moshing = 35;
if (people_moshing)
    take_off_glases();
#+end_src

En C también podemos usar =|= y =&= en lugar de =||= y =&&=, pero estos *siempre* evalúan ambas condiciones, mientras que
los otros puede saltarse evaluar la segunda condición.

Los operadores =| y &= existen porque hacen operaciones de bit a bit en los bits individuales de un número
por ejemplo:

=6 & 4= es igual a 4 ya que si verificamos que bits binarios tienen en común 6 (110 en binario) y 4 (100 en binario) obtenemos (100).

** Pulling the ol' switcheroo
A veces cuando escribimos lógica condicional, necesitamos verificar el valor de la misma variable
más de una vez, para evitar tener muchos =if= tenemos el =switch=

#+begin_src c
switch (train) {
    case 37:
        winnings = winnings + 50;
        break;
    case 65:
        winnings = winnings + 80;
        break;
    case 12:
        winnings = winnings + 20;
        break;
    default:
        winnings = 0;
}
#+end_src

Cuando la computadora llega a un =switch= verifica el valor que se le dio y busca un caso que se sea igual.
Cuando lo encuentra, corre *todo* el código que sigue partir de allí en adelante hasta que se encuentre un =break=

No debemos olvidar poner =breaks= cuando los necesitamos porque nuestro código podría no funcionar como queremos.

** Sometimes once is not enough
*** Usando ciclos =while= en C
Ciclos son un tipo especial de sentencias de control. Un ciclo decide cuantas veces una pieza de código
será ejecutada.

El ciclo más básico de C es el ciclo =while=. Este ejecuta código una vez tras otra mientras una condición
sea verdadera.

#+begin_src c
while (<some condition>) { // <- Verifica la condición antes de correr el bloque
    // Haz algo aqui // <- Si hay una sola linea en el cuerpo no necesitas las llaves.
} // <- Cuando la computadora llega al final del bloque vuelve a verificar si la condicón es verdadera.
#+end_src

*** =do while=
Hay una variación de el ciclo =while= que verifica la condición del loop después de ejecutar el codigo.

Por lo tanto el código es ejecutado al menos una vez.

#+begin_src c
do {
    // Algo
} while (have_not_won);
#+end_src

** Los ciclos a veces siguen la misma estructura
- Hacer algo simple antes del ciclo, como poner un contador
- Tener una condición simple en el ciclo.
- Hacer algo al final del ciclo, como actualizar un contador.

#+begin_src c
int counter = 1;
while (counter < 11) {
    printf("%i green bottles, hanging on a wall\n", counter);
    counter++;
}
#+end_src

*** El ciclo =for=
Los diseñadores de c crearon el ciclo =for= para hacer esta estructura más consisa.

Este es el mismo ejemplo de arriba con un ciclo =for=

#+begin_src c
int counter;
for (counter = 1; counter < 11; counter++){
    printf("%i green bottles, hanging on a wall\n", counter);
}
#+end_src

En el ciclo =for= inicializamos la variable del ciclo (=counter=1=).
Damos una condición que debe de ser verificada (=counter < 11=)
en cada iteración y tenemos un código que va a ser ejecutado al final (=counter++=).

** Usas un =break= para salir
Puedes crear ciclos que verifican una condición al inicio o al final de un bloque de código.
Pero también podemos salir del ciclo con la palabra =break=.

#+begin_src c
while (feeling_hungry) {
    eat_cake();
    if (fealing_queasy) {
        // Salimos del ciclo
        break; // El break te saca del ciclo inmediatamente
    }
    drink_coffee();
}
#+end_src

Los =breaks= te sacan del ciclo saltándose todo el código que siga dentro del bloque del ciclo.

*** Usamos =continue= para continuar
Si queremos saltarnos todo el código que sigue en el bloque e ir a la siguiente iteración.

#+begin_src c
while (feeling_hungry) {
    eat_cake();
    if (fealing_queasy) {
        // Salimos del ciclo
        continue; // lo usuamos para regresar al inicio del bloque de código
    }
    drink_coffee();
}
#+end_src

** Escribiendo funciones
Casi todas las funciones en C siguen el mismo formato, por ejemplo

#+begin_src c
#include <stdio.h>

int larger (int a, int b) { // <- Recibe dos argumentos a y b
    if (a > b)
        return a;
    return b;
    }

int main () {
    int greatest = larger(100, 1000);
    printf("%i is the largest!\n", greatest);
    return 0;
    }
#+end_src

- La función =larger= es diferente a =main= porque recibe dos argumentos.
  - Un argumento es una variable local (solo pertenece ese bloque de código) que obtiene su valor de cuando se llama.
  - La función =larger= toma como argumentos a y b que son enteros y estos deben de ser dados siempre.

*** Funciones =void=
A veces necesitamos crear funciones que no tienen nada útil que retornar, para esto esta el tipo =void=.
Con este nuestras funciones no tienen que tener un =return=.

#+begin_src c
void complain() {
    puts("I'm really not happy"); // :c
}
#+end_src

En C la palabra =void= significa "no importa", cuando tu le digas al compilador que no te importa retornar un valor
en tu función, no necesitaras un =return=.

*** Encadenando sentencias
Casi todo en C tiene un valor de retorno, no solo llamadas a funciones. De hecho cosas como asignaciones tienen valores
de retorno. Por ejemplo

#+begin_src c
x = 4;
#+end_src

Asigna el número 4 a una variable. la parte interesante es que la expresión =x = 4= en *si misma* tiene el valor que será asignado
4.

Esto es importante porque significa que puedes encadenar asignaciones.

#+begin_src c
y = (x = 4); // Ahora y es 4 también.
y = x = 4; // lo mismo que arriba.
#+end_src

Se usan sentencias encadenadas para asignar variables que tienen el mismo valor.

* What are you pointing at?
El lenguaje C te da mucho más control sobre como tu programa usa la memoria de la computadora de lo normal, es necesario
saber como C maneja la memoria.
** El código en C incluye Punteros
Un *puntero* es solo la dirección de una pieza de información en la memoria.

Los punteros son usados por unas cuantas razones:
1. En lugar de pasar un copia de los datos, solo pasas el puntero de donde esta la información en memoria.
2. Podríamos querer que dos trozos de código trabajen con la misma pieza de información en lugar de con una copia.

** Escarbando en la memoria.
Cada vez que se declara una variable, la computadora crea espacio en algún lugar de la memoria para estos datos.

Si declaras una variable dentro de la función =main= la computadora la guardará en una sección de la memoria llamada
la pila (=stack=).

Si una variable es declarada afuera de *cualquier* función será guardada en la sección global (=globals=) de la memoria.

La computadora podría asignar la dirección de memoria de 4,100,000 en la pila para la variable x, si en la variable x
guardamos un 4 este se va a guardar en la misma dirección de memoria.

Podemos saber la dirección de memoria de una variable con el operador =&=.

#+begin_src c
printf("x is stored at %p\n", &n); // &p es usado para dar formato a direcciones.
#+end_src


Dandonos algo como esto.

#+begin_example
x is stored at 0x3E8FA0
#+end_example

=0x3E8FA0= es 4,100,000 en formato hexadecimal (base 16).

Esta seria la dirección de memoria en donde se guarda nuestra variable, se le llaman punteros porque apuntan a la variable
en memoria.


** Usando punteros de memoria
Hay 3 cosas que debes de saber para usar punteros para leer y escribir datos.
*** Obtener la dirección de memoria
Podemos obtener la dirección de memoria de una variable con el operador =&=.

#+begin_src c
int x = 4;
printf("x lives at %p\n", &x);
#+end_src

Pero ya que podemos acceder a la dirección de memoria debemos guardarla en algún lado,
para eso necesitamos una *variable puntero*.

Una variable puntero es una variable que guarda una dirección de memoria.

Cuando declaramos una variable puntero, debemos decir de que tipo de dato esta guardado en esa dirección de memoria.

#+begin_src c
int *addres_of_x;
#+end_src

*** Leer los contenidos de la variable
Cuando ya tienes la dirección de memoria guardada, querrás leer la información que esta allí, lo haces con el operador =*=.

#+begin_src c
int value_stored = *addres_of_x;
#+end_src

El operador =*= y =&= son opuestos.

El operador =&= toma un pedazo de datos y te dice donde están guardados. Y el operador =*= toma una dirección y te dice
que esta guardado allí.

Los punteros a veces son llamados /referencias/, el operador =*= se dice que deferencia una asignación.

*** Cambiar el contenido de una dirección
Si tienes una variable puntero y quieres cambiar la información de la dirección podemos usar el operador =*= de nuevo.

#+begin_src c
*addres_of_x = 99;
#+end_src

Solo debemos de tener en cuenta de usar el operador =*= del lado izquierdo del asignamiento.

** Como pasar un =string= a una función
Ya podemos pasar argumentos simples como enteros y booleanos, pero que pasa si queremos pasar algo más complejo,
como un =string=.

Los =strings= son cadenas de caracteres, así que podemos hacer lo siguiente:

#+begin_src c
void fortune_cookie(char msg[]) {
    printf("Message reads: %s\n", msg);
}

char quote[] = "Cookies make you fat :c";
fortune_cookie(quote);
#+end_src

*** Honey, who shrank the string?
C tiene un operador llamado =sizeof= que puede decirte cuantos bytes de espacio algo tiene en memoria.

#+begin_src c
sizeof(int); // <- 4
sizeof("Turtles!"); // 9 ya que son 8 caracteres más el \0.
#+end_src

Algo extraño pasará si vemos la longitud de un =string= que pasamos a una función

#+begin_src c
void fortune_cookie(char msg[]) {
    printf("Message reads: %s\n", msg);
    printf("msg occupies %i bytes\n", sizeof(msg)); // Nos puede dar 4 u 8 bytes
}
#+end_src


** Variables arreglos son parecidos a los punteros
Cuando creamos una variable arreglo, puede ser usada como un puntero al inicio de el arreglo en memoria.

#+begin_src c
char quote[] = "Cookies make you fat";
#+end_src

La variable =quote= representará la dirección del primer carácter en el =string=.

La computadora, apartara el espacio en el =stack= para cada uno de los caracteres en el =string= más el carácter =\0=,
pero también asociará la dirección del primer carácter con la variable =quote=.

Cada vez que llamemos a esa variable la computadora la *sustituirá con la dirección del primer carácter*, en el
=string=.

La variable arreglo es como un puntero.

#+begin_quote c
printf("The quote string is stored at: %p\n", quote); // Podemos usar quote como un puntero aunque sea un array
#+end_quote

Dando algo como esto:

#+begin_example
The quote string is stored at: 0x7fff69d4bdd7
#+end_example

*** Así que a nuestra función se le paso un puntero.
Esta es la razón porque =sizeof= nos daba un valor no esperado, estaba recibiendo un puntero.

#+begin_src c
void fortune_cookie(char msg[]) {
    printf("Message reads: %s\n", msg); // msg apunta al mensaje.
    printf("msg occupies %i bytes\n", sizeof(msg)) // Nos daraá el tamaño del puntero
}
#+end_src

En un sistema operativo de 32 bits, un puntero usa 4 bytes y en uno de 64 toma 8 bytes de memoria.


*** Operadores y funciones
=sizeof= es un operador, la diferencia entre un operador y una función es que el primero es compilado a una secuencia
de instrucciones por el compilador. pero si el código llama a una función tiene que saltar a una pieza separada de
código.

** Ejemplo: Dating Game

#+begin_src c
#include <stdio.h>

int main () {
    int contestants[] = {1, 2, 3}; // Creamos el arreglo con 3 elementos
    int *choice = contestants; // creamos una variable puntero apuntando al arreglo
    contestants[0] = 2;
    contestants[1] = contestants[2];
    contestants[2] = *choice; // al leer la información del puntero obtendremos el primer elemento del array.
    printf("I'm going to pick contestant number %i\n", contestants[2]); // será el 2
    return 0;
    }
#+end_src

** Pero variables arreglo no son como punteros
Podemos usar los arreglos como punteros pero hay algunas diferencias.

#+begin_src c
char s[] = "How big is it?";
char *t = s;
#+end_src

*** =sizeof(array)= es un el tamaño del arreglo
Ya vimos que si hacemos =sizeof= de un arreglo obtendremos 4 u 8, pero si hacemos lo mismo con un arreglo,
C nos dará el tamaño de ese arreglo

#+begin_src c
char s[] = "How b ..";
sizeof(s); // Nos dara la longitud del array
char *p = s;
sizeof(p); // Nos dará 4 u 8;
#+end_src


*** La dirección del arreglo es la dirección del arreglo
Una variable puntero es /solo/ una variable que guarda una dirección de memoria, pero si usamos el operador
=&= en un arreglo, el resultado es el arreglo en si mismo.

#+begin_example
&s == s &t != t
#+end_example

=&s= es la dirección del arreglo =s=, y =&t= es la dirección de la variable =t=

*** Una variable arreglo no puede apuntar a ningún otro lado
Cuando creamos un arreglo, la computadora asignará el espacio de memoria para guardar el
arreglo, pero no guardará /ninguna/ memoria para guardar la variable arreglo.

La computadora solo guarda la dirección de memoria al inicio del arreglo.

*** Pointer decay
Debido a estas diferencias debemos de ser cuidadosos al asignar arreglos a variables puntero.

Si asignamos un arreglo a una variable puntero, entonces la variable solo tendrá la *dirección*
del arreglo.

El puntero no sabe nada sobre el tamaño del arreglo, así que se perdió un poco de información.

A esto se le llama /pointer decay/ (deterioro de puntero)

Cada vez que pasamos un arreglo a una función, deterioramos el arreglo a un puntero,

Esto es inevitable, así que debemos saber donde hay deterioros así en nuestro código para
evitar bugs.

** Porque los arreglos realmente empiezan en 0
Una variable arreglo puede ser usada como un puntero al primer elemento en un arreglo.

Eso significa que puedes leer el primer elemento de un arreglo usando los corchetes =[]= o usando
el operador =*=.

#+begin_src c
int drinks[] = {4, 2, 3};
// Todas estas lineas son equivalentes
printf("1st order: %i drinks\n", drinks[0]);
printf("1st order: %i drinks\n", *drinks);
#+end_src

Pero porque las direcciones son solo un número, eso significa que podemos hacer /aritmética de punteros/
y /sumar/ valores a una variable puntero para encontrar la siguiente dirección.

En este caso, podemos usar los corchetes para leer el elemento con índice 2 o añadir 2 a la dirección del primer
elemento.

#+begin_src c
printf("3rd order: %i drinks\n", drinks[2]);
printf("3rd order: %i drinks\n", *(drinks + 2));
#+end_src

En general, las dos expresiones son equivalentes, es por eso que los arreglos empiezan en 0, El índice
es solo el número que se le agrega al puntero para encontrar la dirección del elemento.

** Los punteros tienen tipos
La razón por lo que la aritmética de punteros tiene truco, es porque si tu sumas 1 a un puntero de caracteres,
el puntero apuntará ahora a el siguiente carácter es porque un carácter ocupa *1 byte de memoria*.

Si tenemos un puntero tipo =int=, estos usualmente toman 4 bytes de espacio, así que si sumamos 1 a un puntero
tipo =int=, el código sumará 4 bytes a la dirección de memoria.

Los tipos en los punteros sirven para que el compilador sepa cuando ajustar la aritmética de punteros.

así que podemos hacer cosas como estas:

#+begin_src c
int doses[] = { 1, 3, 2, 1000 };
// Todos los ejemplos de abajo son equivalentes.
doses[3] == *(doses + 3) == *(3 + doses) == 3[doses]
#+end_src

** Usando punteros para entrada de datos
Ya sabemos usar =scanf= para leer del teclado.

#+begin_src c
char name[40];
printf("Enter your name: ");
scanf("%39s", name); // el %39 hace que solo leamos 39 caracteres ya que el 40 es \0
#+end_src

=scanf= funciona cuando le damos una variable arreglo.

Funciones que necesitan actualizar una variable no necesitan el valor de la variable en si, si no su *dirección*.

*** Introduciendo números con =scanf=
Para meter datos en un campo numérico le pasamos el puntero a una variable numérica.

#+begin_src c
int age;
printf("Enter your age: ");
scanf("%i", &age); // %i significa que leeremos números enteros, y le pasamos la dirección de memoria de la variable.
#+end_src

También podemos usar =scanf= para leer más de una pieza de información al mismo tiempo.

#+begin_src c
char fist_name[20];
char last_name[20];
printf("Enter first and last name: ");
scanf("%19 %19", first_name, last_name); // Lee el primer nombre, luego un espacio y después el segundo nombre
printf("First: %s last: %s\n", firt_name, last_name);
#+end_src

** Se cuidadoso con =scanf=
=scanf= puede causar desbordamientos si no le ponemos un límite, como en el siguiente ejemplo.

#+begin_src c
char food[5]; // Guardamos 5 caracteres
printf("Enter favorite food: ");
scanf("%s", food); // No ponemos limite en la cantidad de caracteres a leer
printf("Favorite food: %s\n", food);
#+end_src

Si en el código de arriba, damos una respuesta de más de 5 caracteres nuestro programa crasheara ya que =scanf=
escribe más allá de los 5 caracteres asignados para el arreglo =food=.

A esto se le llama =buffer overflow= y puede crashear nuestro programa o crear bugs.

** =fgets()= como alternativa a =scanf=
=fgets= es una función parecida a =scanf=, pero a diferencia de =scanf= debemos darle una longitud máxima.

#+begin_src c
char foodp[5];
printf("Enter favorite food: ");
fgets(food, sizeof(food), stdin);
#+end_src

=fgets= toma, un puntero, después el tamaño máximo a leer, y después de donde leer estos datos, en este caso de decimos =stdin=
que es =standard input= o que lea del teclado.

*** Usando =sizeof= con =fgets=
En el código de arriba usamos =sizeof= para dar el tamaño.

Debemos de ser cuidadosos con esto, ya que =sizeof= nos da la cantidad de espacio ocupado por una variable.

En el ejemplo, usamos =sizeof= porque usado en un arreglo nos da el tamaño del arreglo, si =food= fuera un puntero normal
a una variable =sizeof= nos daría el tamaño del puntero.

#+begin_src c
printf("Enter favorite food: ");
fgets(food, 5, stdin);
#+end_src

Generalmente cuando queremos leer datos estructurados usamos =scanf= y si queremos leer un solo string sin estructura es más conveniente usar =fgets=.

** En memoria

Si tenemos un código como este:

#+begin_src c
#include <stdio.h>

int main() {
    char *cards = "JQK";
    char a_card = cards[2];
    cards[2] = cards[1];
    cards[1] = cards[0];
    cards[0] = cards[2];
    cards[2] = cards[1];
    cards[1] = a_card;
    puts(cards);
    return 0;
}
#+end_src

obtendremos un error al correr el código, esto porque =cards= es un puntero a un =string= literal, y estos son inmutables.

Lo que podríamos hacer es crear un arreglo con este =string= para que podamos modificarlo.

#+begin_src c
char cards[] = "JQK";
#+end_src

Para entender que pasa debemos saber como c y la computadora manejan la memoria.

*** La computadora carga el =string= literal
Cuando la computadora carga el programa en memoria, pone todas las constantes en un bloque de memoria inmutable,
allí es donde esta "JQK".

Esta sección es de solo lectura.

*** El programa crea la variable =cards= en el =stack=.
El =stack= (la pila), es la sección de memoria que la computadora usa para variables locales.

Las variables localese son variables dentro de funciones, la variable =cards= estará allí.

*** La variable =cards= le es asignada la dirección de memoria de "JQK"
la variable =cards= contiene la dirección de memoria del =string= "JQK".

Esta dirección de memoria pertenece a la memoria de solo lectura.

*** La computadora trata de cambiar el =string=
Cuando el programa intenta cambiar el contenido de el =string= al cual apunta la
variable =cards= no puede, es de solo lectura.

** Si vas a cambiar un =string=, haz una copia
Siempre que queramos cambiar los contenidos de un =string= debemos cambiar una copia.

Para crear una copia, creamos un nuevo =string= como un arreglo.

#+begin_src c
char cards[] = "JQK";
#+end_src

***  =cards[]= o =cards*=
Si vemos una declaración así, que significa realmente?

#+begin_src c
char cards[]
#+end_src

Depende de donde la veamos.

Si es una declaración de variable normal, Entonces significa que =cards= es un arreglo,
y debemos asignarle un valor inmediatamente ya que no le dimos el tamaño:

#+begin_src c
int my_function() {
    char cards[] = "JQK";
}
#+end_src

Pero si =cards= es declarado como un argumento de una función, significa que =cards= es un puntero.

#+begin_src c
void stack_deck(char cards[]) { // <- cards es un puntrero
    // .....
}

void stack_deck(char *cards) { // Estas dos funciones son equivalentes.
    // ...
}
#+end_src

** Que sucede en memoria
Con el nuevo código, nuestro programa manejara la memoria de manera diferente.

*** La computadora carga el =string= literal
La computadora carga el programa y guarada "JQK" en la memoria de solo lectura.

*** El programa crea un nuevo arreglo en el =stack=
Declaramos un arreglo, así que nuestro programa creara uno del tamaño
necesario para guardar el =string= "JQK".

*** El programa inicializa el arreglo
Además de asignar el espacio la computadora también copia el contenido del =string=
literal "JQK".

** Recordando como funciona la memoria
*** =Stack= (pila)
Esta sección de memoria es usada para guardar variables locales.

Cada vez que llamamos a una función, todas las variables son creadas en el =stack=.

Se llama =stack= porque funciona como una pila, las variables son añadidas una a una cuando
se entras a una función y son retiradas de este cuando sales.

*** =Heap= (montículo)
La =heap= es para memoria dinámica, datos que son creados cuando el programa esta corriendo
y se quedan allí por un tiempo.


*** Globales
Una variable global son variables que viven afuera de las funciones, y por lo tanto
son visibles para todas ellas.

Estas son creadas cuando el programa corre al principio y pueden ser editadas.

*** Constantes
Las constantes también son creadas cuando el programa corre al principio,
pero están en memoria de solo lectura.

*** Código
La mayoría de los sistemas operativos ponen el código en las direcciones de memoria
más bajas.

El segmento de código es de solo lectura. Esta es la parte de la memoria
donde el código ensamblado se carga.

* Teoría de =strings=
Ya sabemos que los =strings= en C son solo arreglos de caracteres, pero para hacer cosas
útiles con ellos necesitamos =string.h=.

Este es parte de la librería estándar de C y se dedica a la manipulación de =strings=.

** Creando un arreglo de arreglos
En una situación donde queremos guardar muchos strings podemos usar un arreglo de arreglos.
Sabiendo que cada =string= es un array de caracteres.

#+begin_src c
char tracks[][80] = {
    "I left my heart in Harvard Med School",
    "Newark, Newark - a wonderful town",
    "Dancing with dork",
    "From here to maternity",
};
#+end_src

En el código anterior, el primer par de corchetes representa el arreglo de todos
los =strings=, y el segundo es la cantidad de caracteres que tiene cada =string=.

De esta manera podemos encontrar un =string= arbitrario así:

#+begin_src c
tracks[4] -> "The girl from Iwo Jima"
#+end_src

pero también podemos obtener los caracteres individuales de cada =string=
de la siguiente manera:

#+begin_src c
tracks[4][6] -> 'r'
#+end_src

** Encontrando =strings= que contienen una búsqueda
La librería estándar de C es un conjunto de código que obtienes al instalar un compilador
de C. La librería de código hace cosas útiles como abrir archivos, hacer matemáticas o
manejar memoria.

Esta librería esta dividida en muchas secciones, cada una tiene un *header* (cabecera).

Esta cabecera lista todas las funciones que viven en una sección particular de la librería.

Hemos usado la cabecera =stdio.h= que contiene funciones para la entrada/salida de datos,
como =printf= y =scanf=.

La librería estándar contiene código para procesar y manipular =strings=,
para acceder a este debemos de agregarla al inicio de nuestro programa de la siguiente
manera:

#+begin_src c
#include <stdio.h>
#include <string.h> // <- Agregamos esta linea para usar sus funciones.
#+end_src

** Usando la función =strstr()=
Digamos que queremos buscar la palabra "fun" en "dysfunctional":

#+begin_src c
strstr("dysfunctional", "fun");
#+end_src

La función buscará el segundo =string= en el primero, cuando lo encuentre retorna la dirección
del =string= en memoria.

Si =strstr= no puede encontrar el =string= retornará el valor 0.

Ya que 0 para C es equivalente a =false=, podemos usar esta función para verificar la
existencia de un =string= dentro de otro.

#+begin_src c
char s0[] = "dysfunctional";
char s1[] = "fun";
if (strstr(s0, s1))
    puts("I found the fun in dysfunctional");
#+end_src

** Arreglo de arreglos vs arreglo de punteros
Otra opción a un arreglo de arreglos, es un arreglo de punteros, este es un arreglo de
direcciones de memoria, este es útil para crear un una lista de =strings= literales.

#+begin_src c
char *names_for_dog[] = {"Bowser", "Bonza", "Snodgrass"};
#+end_src

* Haz una cosa y hazla bien
Cada sistema operativo incluye herramientas pequeñas.

Pequeñas herramientas escritas en C hacen pequeñas tareas especializadas a lo largo del sistema operativo.
** Pequeñas herramientas pueden resolver problemas grandes
La mayoría de sistemas operativos vienen con un gran conjunto de pequeñas herramientas que puedes usar desde
la terminal (como linux), cuando tenemos un problema grande que debemos resolver, podemos partirlo en una
serie de pequeños problemas y escribir una serie de pequeñas herramientas para resolverlos.

** Errores estándar
La salida estándar es la manera por defecto de salida de datos de un programa, pero no nos deja manejar
errores de manera flexible.

Para esto tenemos el error estándar, este es una segunda salida de datos creada para el manejo de errores.
** Por defecto el error estándar es mandado a la pantalla.
El sistema operativo crea el error estándar al mismo tiempo y de la misma manera que la salida estándar.

Esto significa que cuando redireccionamos la salida estándar de nuestro programa para que podamos redirigir
la salida a un archivo,  el error estándar seguirá mandando los errores a la pantalla.
** =fprintf()= imprime un =stream= de datos.
Ya sabemos que =printf()= manda información a la salida estándar, pero lo que no sabemos es que =printf()= es
una versión de otra función más general llamada =fprint()=.

Los dos ejemplos siguientes son equivalentes:

#+begin_src c
printf("I like Tultles"); // Cuando llamamos a printf en realidad llamamos a fprintf
fprintf(stdout, "I like Tultles"); // stdout es la salida estándar
#+end_src

Esta función nos permite elegir a donde queremos mandar el texto, podemos usar la =stdout= (salida estándar)
o la =stderr= (error estándar).

También existe =fscanf= que es la función que es llamada cuando usamos =scanf=, allí leemos de =stdin= (entrada estándar).

Así como podemos redirigir la salida de nuestro programa a un archivo de texto haciendo =./programa > text.txt=,
podemos redirigir el error estándar haciendo =./programa 2> text.txt=
